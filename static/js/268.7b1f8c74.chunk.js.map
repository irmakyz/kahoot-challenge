{"version":3,"file":"static/js/268.7b1f8c74.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","pages/Home/Home.tsx","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts","services/api.ts"],"sourcesContent":["import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Subscribable } from './subscribable'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverBaseResult,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: Subscribable<\n    InfiniteQueryObserverListener<TData, TError>\n  >['subscribe']\n\n  // Type override\n  getCurrentResult!: ReplaceReturnType<\n    QueryObserver<\n      TQueryFnData,\n      TError,\n      TData,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >['getCurrentResult'],\n    InfiniteQueryObserverResult<TData, TError>\n  >\n\n  // Type override\n  protected fetch!: ReplaceReturnType<\n    QueryObserver<\n      TQueryFnData,\n      TError,\n      TData,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >['fetch'],\n    Promise<InfiniteQueryObserverResult<TData, TError>>\n  >\n\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const parentResult = super.createResult(query, options)\n\n    const { isFetching, isRefetching, isError, isRefetchError } = parentResult\n    const fetchDirection = state.fetchMeta?.fetchMore?.direction\n\n    const isFetchNextPageError = isError && fetchDirection === 'forward'\n    const isFetchingNextPage = isFetching && fetchDirection === 'forward'\n\n    const isFetchPreviousPageError = isError && fetchDirection === 'backward'\n    const isFetchingPreviousPage = isFetching && fetchDirection === 'backward'\n\n    const result: InfiniteQueryObserverBaseResult<TData, TError> = {\n      ...parentResult,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchNextPageError,\n      isFetchingNextPage,\n      isFetchPreviousPageError,\n      isFetchingPreviousPage,\n      isRefetchError:\n        isRefetchError && !isFetchNextPageError && !isFetchPreviousPageError,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n\n    return result as InfiniteQueryObserverResult<TData, TError>\n  }\n}\n\ntype ReplaceReturnType<\n  TFunction extends (...args: Array<any>) => unknown,\n  TReturn,\n> = (...args: Parameters<TFunction>) => TReturn\n","import { useInfiniteQuery } from \"@tanstack/react-query\";\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../../services/api.ts\";\nimport { BUTTON_SIZES } from \"../../components/atoms/Button/constants.ts\";\nimport \"./Home.scss\";\nimport pokeball from \"../../assets/images/pokeball.png\";\nimport { Page, ListItem } from \"./types.ts\";\nimport { Button, List } from \"../../components/index.ts\";\n\nconst Home: React.FC = () => {\n  const [sortedListItems, setSortedListItems] = useState<ListItem[]>([]);\n  const {\n    data: listItems,\n    error,\n    isLoading,\n    fetchNextPage,\n  } = useInfiniteQuery({\n    queryKey: [\"listItems\"],\n    queryFn: ({ pageParam = 0 }: { pageParam: number }) =>\n      fetchData({ pageParam }),\n    getNextPageParam: (lastPage: Page): number | undefined =>\n      lastPage.hasMore ? lastPage.nextPage : undefined,\n    initialPageParam: 0,\n  });\n\n  const loadMore = () => {\n    fetchNextPage();\n  };\n\n  useEffect(() => {\n    const resolveAndSortData = async () => {\n      if (!listItems?.pages) return;\n\n      const allItems = listItems.pages.flatMap((page) => page.items || []);\n\n      const resolvedItems = await Promise.all(\n        allItems.map(async (item) => {\n          return item instanceof Promise ? await item : item;\n        })\n      );\n      const sortedData = resolvedItems\n        .filter((item) => item?.name)\n        .sort((a, b) => a.name.localeCompare(b.name));\n\n      setSortedListItems(sortedData);\n    };\n\n    resolveAndSortData();\n  }, [listItems]);\n\n  return (\n    <div className='home'>\n      <h1 className='home__header'>Catch a Pokemon!</h1>\n      {error && (\n        <div>\n          <img src={pokeball} alt='Pokeball' />\n          An error happened while gathering the pokemons, try to reload the\n          page!\n        </div>\n      )}\n      {!error && (\n        <List listItems={sortedListItems || []} isLoading={isLoading} />\n      )}\n      <Button size={BUTTON_SIZES.LARGE} onClick={loadMore}>\n        Load More\n      </Button>\n    </div>\n  );\n};\n\nexport default Home;\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseInfiniteQueryResult,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n} from './infiniteQueryOptions'\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): DefinedUseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery(\n  options: UseInfiniteQueryOptions,\n  queryClient?: QueryClient,\n) {\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  )\n}\n","import axios from \"axios\";\nimport { ItemAbility, ItemPower, ItemResponse, ItemType } from \"./types\";\n\nconst API_URL = \"https://pokeapi.co/api/v2/pokemon\";\nexport const fetchData = async ({ pageParam = 0 }: { pageParam: number }) => {\n    const response = await axios.get(`${API_URL}?offset=${pageParam}&limit=10`);\n    const results = response.data.results;\n\n    const items = results.map(async (result: ItemResponse) => {\n        return {\n            name: result.name,\n            detailsURL: result.url,\n        };\n    });\n\n    return {\n        items,\n        nextPage: pageParam + 10,\n        hasMore: response.data.next !== null,\n    };\n};\n\nexport const fetchItemDetails = async (detailsURL: string) => {\n  const details = await axios.get(detailsURL);\n  return {\n    id: details.data.id,\n    name: details.data.name,\n    types: details.data.types.map((typeInfo: ItemType) => typeInfo.type.name),\n    powers: details.data.stats.map((statInfo: ItemPower) => {\n      return { name: statInfo.stat.name, value: statInfo.base_stat };\n    }),\n    abilities: details.data.abilities.map(\n      (abilityInfo: ItemAbility) => abilityInfo.ability.name\n    ),\n    experience: details.data.base_experience,\n    imageUrl: details.data.sprites.front_default,\n  };\n};\n"],"names":["InfiniteQueryObserver","QueryObserver","constructor","client","options","super","bindMethods","this","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","fetch","meta","fetchMore","direction","createResult","query","state","parentResult","isFetching","isRefetching","isError","isRefetchError","fetchDirection","fetchMeta","isFetchNextPageError","isFetchingNextPage","isFetchPreviousPageError","isFetchingPreviousPage","hasNextPage","data","hasPreviousPage","Home","sortedListItems","setSortedListItems","useState","listItems","error","isLoading","queryKey","queryFn","_ref","pageParam","fetchData","getNextPageParam","lastPage","hasMore","nextPage","undefined","initialPageParam","useBaseQuery","queryClient","useEffect","async","pages","allItems","flatMap","page","items","sortedData","Promise","all","map","item","filter","name","sort","a","b","localeCompare","resolveAndSortData","_jsxs","className","children","_jsx","src","pokeball","alt","List","Button","size","BUTTON_SIZES","LARGE","onClick","loadMore","response","axios","get","results","result","detailsURL","url","next","fetchItemDetails","details","id","types","typeInfo","type","powers","stats","statInfo","stat","value","base_stat","abilities","abilityInfo","ability","experience","base_experience","imageUrl","sprites","front_default"],"sourceRoot":""}