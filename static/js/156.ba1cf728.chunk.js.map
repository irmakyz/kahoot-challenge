{"version":3,"file":"static/js/156.ba1cf728.chunk.js","mappings":"oNAQA,MA+BA,EA/B0BA,KACxB,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,MAErBC,KAAMC,EAAW,UACjBC,EAAS,MACTC,IC+BqBC,ED9BG,CACxBC,SAAU,CAAC,cAAeP,GAC1BQ,QAASA,KAAMC,EAAAA,EAAAA,GAA2B,OAAVT,QAAU,IAAVA,EAAAA,EAAc,gBC6BzCU,EAAAA,EAAAA,GAAaJ,EAASK,EAAAA,EAAeC,IADvC,IAAkBN,EAA0BM,EDzBjD,OAAIP,GAAcQ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,SAAC,uBAEtCX,GAAcD,GAIjBU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAAU,cAAY,UAASC,UAC5CF,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACdC,KAAiB,OAAXd,QAAW,IAAXA,OAAW,EAAXA,EAAac,KACnBC,MAAkB,OAAXf,QAAW,IAAXA,OAAW,EAAXA,EAAae,MACpBC,UAAsB,OAAXhB,QAAW,IAAXA,OAAW,EAAXA,EAAagB,UACxBC,WAAuB,OAAXjB,QAAW,IAAXA,OAAW,EAAXA,EAAaiB,WACzBC,OAAmB,OAAXlB,QAAW,IAAXA,OAAW,EAAXA,EAAakB,OACrBC,SAAqB,OAAXnB,QAAW,IAAXA,OAAW,EAAXA,EAAamB,SACvBlB,UAAWA,OAXRS,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,SAAC,iBAa1B,C,sDEhCV,MACaQ,EAAYC,UAAqD,IAA9C,UAAEC,EAAY,GAA0BC,EACpE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,4CAAqBJ,cAUtD,MAAO,CACHK,MAVYH,EAASzB,KAAK6B,QAERC,KAAIR,UACf,CACHP,KAAMgB,EAAOhB,KACbjB,WAAYiC,EAAOC,QAMvBC,SAAUV,EAAY,GACtBW,QAAgC,OAAvBT,EAASzB,KAAKmC,KAC1B,EAGQ5B,EAAmBe,UAC9B,MAAMc,QAAgBV,EAAAA,EAAMC,IAAI7B,GAChC,MAAO,CACLuC,GAAID,EAAQpC,KAAKqC,GACjBtB,KAAMqB,EAAQpC,KAAKe,KACnBC,MAAOoB,EAAQpC,KAAKgB,MAAMc,KAAKQ,GAAuBA,EAASC,KAAKxB,OACpEI,OAAQiB,EAAQpC,KAAKwC,MAAMV,KAAKW,IACvB,CAAE1B,KAAM0B,EAASC,KAAK3B,KAAM4B,MAAOF,EAASG,cAErD3B,UAAWmB,EAAQpC,KAAKiB,UAAUa,KAC/Be,GAA6BA,EAAYC,QAAQ/B,OAEpDG,WAAYkB,EAAQpC,KAAK+C,gBACzB3B,SAAUgB,EAAQpC,KAAKgD,QAAQC,cAChC,C","sources":["pages/Details/Details.tsx","../node_modules/@tanstack/react-query/src/useQuery.ts","services/api.ts"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { fetchItemDetails } from \"../../services/api.ts\";\nimport { ListItemDetails } from \"../../components/index.ts\";\nimport \"./Details.scss\";\nimport { ItemDetails } from \"../../types.ts\";\n\nconst Details: React.FC = () => {\n  const { detailsURL } = useParams<{ detailsURL: string }>();\n  const {\n    data: itemDetails,\n    isLoading,\n    error,\n  } = useQuery<ItemDetails>({\n    queryKey: [\"itemDetails\", detailsURL],\n    queryFn: () => fetchItemDetails(detailsURL ?? \"defaultURL\"),\n  });\n\n  if (error) return <div className='details'>Error loading data</div>;\n\n  if (!isLoading && !itemDetails)\n    return <div className='details'>No data found</div>;\n\n  return (\n    <div className='details' data-testid='details'>\n      <ListItemDetails\n        name={itemDetails?.name}\n        types={itemDetails?.types}\n        abilities={itemDetails?.abilities}\n        experience={itemDetails?.experience}\n        powers={itemDetails?.powers}\n        imageUrl={itemDetails?.imageUrl}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n};\n\nexport default Details;\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","import axios from \"axios\";\nimport { ItemAbility, ItemPower, ItemResponse, ItemType } from \"./types\";\n\nconst API_URL = \"https://pokeapi.co/api/v2/pokemon\";\nexport const fetchData = async ({ pageParam = 0 }: { pageParam: number }) => {\n    const response = await axios.get(`${API_URL}?offset=${pageParam}&limit=10`);\n    const results = response.data.results;\n\n    const items = results.map(async (result: ItemResponse) => {\n        return {\n            name: result.name,\n            detailsURL: result.url,\n        };\n    });\n\n    return {\n        items,\n        nextPage: pageParam + 10,\n        hasMore: response.data.next !== null,\n    };\n};\n\nexport const fetchItemDetails = async (detailsURL: string) => {\n  const details = await axios.get(detailsURL);\n  return {\n    id: details.data.id,\n    name: details.data.name,\n    types: details.data.types.map((typeInfo: ItemType) => typeInfo.type.name),\n    powers: details.data.stats.map((statInfo: ItemPower) => {\n      return { name: statInfo.stat.name, value: statInfo.base_stat };\n    }),\n    abilities: details.data.abilities.map(\n      (abilityInfo: ItemAbility) => abilityInfo.ability.name\n    ),\n    experience: details.data.base_experience,\n    imageUrl: details.data.sprites.front_default,\n  };\n};\n"],"names":["Details","detailsURL","useParams","data","itemDetails","isLoading","error","options","queryKey","queryFn","fetchItemDetails","useBaseQuery","QueryObserver","queryClient","_jsx","className","children","ListItemDetails","name","types","abilities","experience","powers","imageUrl","fetchData","async","pageParam","_ref","response","axios","get","items","results","map","result","url","nextPage","hasMore","next","details","id","typeInfo","type","stats","statInfo","stat","value","base_stat","abilityInfo","ability","base_experience","sprites","front_default"],"sourceRoot":""}