{"version":3,"file":"static/js/37.0feba1ee.chunk.js","mappings":"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","sources":["components/atoms/Image/Image.tsx","components/atoms/StatusBar/StatusBar.tsx","components/atoms/Chip/Chip.tsx","components/molecules/ItemStats/ItemStats.tsx","components/organisms/ListItemInfo/ListItemInfo.tsx","components/templates/ListItemDetails/ListItemDetails.tsx","pages/Details/Details.tsx","../node_modules/@tanstack/react-query/src/useQuery.ts","services/api.ts","components/atoms/Button/constants.ts","components/atoms/Button/Button.tsx"],"sourcesContent":["import React from 'react';\nimport { ImageProps } from './types';\nimport './Image.scss';\n\nconst Image: React.FC<ImageProps> = ({ imageUrl, name }) => {\n  return (\n    <div className=\"image-container\">\n      <img src={imageUrl} alt={`${name}`} className=\"image\" />\n    </div>\n  );\n};\n\nexport default Image;","import React from \"react\";\nimport { StatusBarProps } from \"./types\";\nimport \"./StatusBar.scss\";\n\nexport const StatusBar: React.FC<StatusBarProps> = ({ name, value }) => {\n  const maxValue = 100;\n  const percentage = (value / maxValue) * 100;\n\n  return (\n    <div className='status-bar'>\n      <span className='status-name'>{name}</span>\n      <div className='status-bar-container'>\n        <div\n          className='status-bar-fill'\n          data-testid='status-bar'\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n      <span className='status-value'>{value}</span>\n    </div>\n  );\n};\n","import { ChipProps } from './types';\nimport React from 'react';\nimport './Chip.scss';\n\nexport const Chip: React.FC<ChipProps> = ({ label, color }) => {\n  return (\n    <span className='chip' style={{color}}>\n      {label}\n    </span>\n  );\n};","import React from \"react\";\nimport { ItemStatsProps } from \"./types.ts\";\nimport \"./ItemStats.scss\";\n\nexport const ItemStats: React.FC<ItemStatsProps> = ({\n  icon,\n  label,\n  values,\n}) => {\n  return (\n    <div className='item-stats'>\n      <img src={icon} alt='' className='item-stats__icon' />\n      <span className='item-stats__label'>{label}</span>:\n      {values.map((value) => (\n        <span key={value} className='item-stats__value'>\n          {value}\n        </span>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ListItemInfoProps } from \"./types.ts\";\nimport { StatusBar } from \"../../atoms/StatusBar/StatusBar.tsx\";\nimport { Chip } from \"../../atoms/Chip/Chip.tsx\";\nimport { ItemStats } from \"../../molecules/ItemStats/ItemStats.tsx\";\nimport \"./ListItemInfo.scss\";\n\nexport const ListItemInfo: React.FC<ListItemInfoProps> = ({\n  name,\n  types,\n  stats,\n  abilities,\n  baseExperience,\n}) => {\n  return (\n    <div className='list-item-info'>\n      <h1 className='list-item-info__name'>{name}</h1>\n      <div className='list-item-info__types-container'>\n        {types.map((type, index) => (\n          <Chip label={type} key={index} color={\"#9747ff\"} />\n        ))}\n      </div>\n      <div className='list-item-info__stats-container'>\n        <h2 className='list-item-info__stats-title'>Base Stats</h2>\n        {stats.map((stat, index) => (\n          <StatusBar key={index} name={stat.name} value={stat.value} />\n        ))}\n      </div>\n      <div className='list-item-info__abilities-container'>\n        <h2 className='list-item-info__abilities-title'>Abilities</h2>\n        <div className='list-item-info__abilities-chips'>\n          {abilities.map((ability, index) => (\n            <Chip label={ability} key={index} color={\"#9747ff\"} />\n          ))}\n        </div>\n      </div>\n      <div className='list-item-info__base-experience-container'>\n        <ItemStats\n          icon='https://cdn.builder.io/api/v1/image/assets/3511483645cf4a6fbedd7884395eee96/1fd04cdcdfc17362cbd3e9f5ac5f173040522bcff145c9070b8beac1c5edc632?apiKey=3511483645cf4a6fbedd7884395eee96&'\n          label='Base Experience'\n          values={[baseExperience]}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Image from \"../../atoms/Image/Image.tsx\";\nimport { BUTTON_COLORS } from \"../../atoms/Button/constants.ts\";\nimport Button from \"../../atoms/Button/Button.tsx\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ListItemInfo } from \"../../organisms/ListItemInfo/ListItemInfo.tsx\";\nimport { ListItemDetailsProps } from \"./types.ts\";\nimport \"./ListItemDetails.scss\";\nimport Loader from \"../../atoms/Loader/Loader.tsx\";\n\nexport const ListItemDetails: React.FC<ListItemDetailsProps> = ({\n  name,\n  types,\n  stats,\n  abilities,\n  baseExperience,\n  imageUrl,\n  isLoading = false,\n}) => {\n  const navigate = useNavigate();\n  const returnToList = () => {\n    navigate(\"/\");\n  };\n\n  return (\n    <div className='list-item-details'>\n      <div className='list-item-details__button-container'>\n        <Button color={BUTTON_COLORS.TERTIARY} onClick={returnToList}>\n          Back to List\n        </Button>\n      </div>\n      <div className='list-item-details__card'>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className='list-item-details__card-content'>\n            <Image imageUrl={imageUrl} name={name} />\n            <div className='list-item-details__card-content-info'>\n              <ListItemInfo\n                name={name}\n                types={types}\n                stats={stats}\n                abilities={abilities}\n                baseExperience={baseExperience}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { fetchItemDetails } from \"../../services/api.ts\";\nimport { ListItemDetails } from \"../../components/templates/ListItemDetails/ListItemDetails.tsx\";\nimport \"./Details.scss\";\n\nconst Details: React.FC = () => {\n  const { detailsURL } = useParams<{ detailsURL: string }>();\n  const {\n    data: itemDetails,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"itemDetails\", detailsURL],\n    queryFn: () => fetchItemDetails(detailsURL ?? \"defaultURL\"),\n  });\n\n  if (error) return <div className='details'>Error loading data</div>;\n\n  if (!isLoading && !itemDetails) return <div className='details'>No data found</div>;\n\n  return (\n    <div className='details' data-testid='details'>\n      <ListItemDetails\n        name={itemDetails?.name}\n        types={itemDetails?.types}\n        abilities={itemDetails?.abilities}\n        baseExperience={itemDetails?.experience}\n        stats={itemDetails?.powers}\n        imageUrl={itemDetails?.imageUrl}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n};\n\nexport default Details;\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","import axios from \"axios\";\n\nconst API_URL = \"https://pokeapi.co/api/v2/pokemon\";\nexport const fetchData = async ({ pageParam = 0 }: { pageParam: number }) => {\n    const response = await axios.get(`${API_URL}?offset=${pageParam}&limit=10`);\n    const results = response.data.results;\n\n    const items = results.map(async (result: any) => {\n        return {\n            name: result.name,\n            detailsURL: result.url,\n        };\n    });\n\n    return {\n        items,\n        nextPage: pageParam + 10,\n        hasMore: response.data.next !== null,\n    };\n};\n\nexport const fetchItemDetails = async (detailsURL: string) => {\n  const details = await axios.get(detailsURL);\n  return {\n    id: details.data.id,\n    name: details.data.name,\n    types: details.data.types.map((typeInfo: any) => typeInfo.type.name),\n    powers: details.data.stats.map((statInfo: any) => {\n      return { name: statInfo.stat.name, value: statInfo.base_stat };\n    }),\n    abilities: details.data.abilities.map(\n      (abilityInfo: any) => abilityInfo.ability.name\n    ),\n    experience: details.data.base_experience,\n    imageUrl: details.data.sprites.front_default,\n  };\n};\n","export const BUTTON_SIZES = {\n  SMALL: \"small\",\n  MEDIUM: \"medium\",\n  LARGE: \"large\",\n  BLOCK: \"block\",\n} as const;\n\nexport const BUTTON_COLORS = {\n  PRIMARY: \"primary\",\n  SECONDARY: \"secondary\",\n  TERTIARY: \"tertiary\",\n  DANGER: \"danger\",\n  SUCCESS: \"success\",\n} as const;\n","import React from 'react';\nimport './Button.scss';\nimport { ButtonProps } from './types';\nimport { BUTTON_SIZES, BUTTON_COLORS } from './constants.ts';\n\nconst Button: React.FC<ButtonProps> = ({ size = BUTTON_SIZES.SMALL, color = BUTTON_COLORS.PRIMARY, onClick, children }) => {\n  return (\n    <button className={`button ${size} ${color}`} onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;"],"names":["_ref","imageUrl","name","_jsx","className","children","src","alt","StatusBar","value","percentage","_jsxs","style","width","Chip","label","color","ItemStats","icon","values","map","ListItemInfo","types","stats","abilities","baseExperience","type","index","stat","ability","ListItemDetails","isLoading","navigate","useNavigate","Button","BUTTON_COLORS","TERTIARY","onClick","returnToList","Loader","Image","Details","detailsURL","useParams","data","itemDetails","error","options","queryKey","queryFn","fetchItemDetails","useBaseQuery","QueryObserver","queryClient","experience","powers","fetchData","async","pageParam","response","axios","get","items","results","result","url","nextPage","hasMore","next","details","id","typeInfo","statInfo","base_stat","abilityInfo","base_experience","sprites","front_default","BUTTON_SIZES","SMALL","MEDIUM","LARGE","BLOCK","PRIMARY","SECONDARY","DANGER","SUCCESS","size"],"sourceRoot":""}